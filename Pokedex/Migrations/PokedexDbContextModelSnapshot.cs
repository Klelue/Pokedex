// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pokedex;

namespace Pokedex.Migrations
{
    [DbContext(typeof(PokedexDbContext))]
    partial class PokedexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Pokedex.Models.Pokemon", b =>
                {
                    b.Property<int>("nationalDexNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("generation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("healthPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("legendary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int>("spAttack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("spDefense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("speed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("total")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type1name")
                        .HasColumnType("TEXT");

                    b.Property<string>("type2name")
                        .HasColumnType("TEXT");

                    b.HasKey("nationalDexNumber");

                    b.HasIndex("type1name");

                    b.HasIndex("type2name");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("Pokedex.Models.Typ", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("name");

                    b.ToTable("Typ");
                });

            modelBuilder.Entity("TypTyp", b =>
                {
                    b.Property<string>("effectivAgainstTypsname")
                        .HasColumnType("TEXT");

                    b.Property<string>("weakAgainstTypsname")
                        .HasColumnType("TEXT");

                    b.HasKey("effectivAgainstTypsname", "weakAgainstTypsname");

                    b.HasIndex("weakAgainstTypsname");

                    b.ToTable("TypTyp");
                });

            modelBuilder.Entity("Pokedex.Models.Pokemon", b =>
                {
                    b.HasOne("Pokedex.Models.Typ", "type1")
                        .WithMany()
                        .HasForeignKey("type1name");

                    b.HasOne("Pokedex.Models.Typ", "type2")
                        .WithMany()
                        .HasForeignKey("type2name");

                    b.Navigation("type1");

                    b.Navigation("type2");
                });

            modelBuilder.Entity("TypTyp", b =>
                {
                    b.HasOne("Pokedex.Models.Typ", null)
                        .WithMany()
                        .HasForeignKey("effectivAgainstTypsname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokedex.Models.Typ", null)
                        .WithMany()
                        .HasForeignKey("weakAgainstTypsname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
